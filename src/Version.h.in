#pragma once
// 这个文件是由 cmake 生成的。所做的更改将被覆盖。  
// clang-format off  // 关闭clang-format格式化，可能是因为这个文件中包含了一些特殊格式或宏定义，不希望被clang-format自动格式化。

#include <string_view>

// 创建一个版本号，用于在宏比较中使用。  
//  
// 示例：  
//  
// // 检查版本是否小于2.1.0  
// #if ${UPPER_PROJECT_NAME}_VERSION < ${UPPER_PROJECT_NAME}_VERSION_CHECK(2, 1, 0)  
//     // 执行操作  
// #endif  
//  
// 返回一个整数，该整数可用于比较操作  
#define ${UPPER_PROJECT_NAME}_VERSION_CHECK( major, minor, patch ) ( ((major)<<16) | ((minor)<<8) | (patch) )
// 这里的宏定义用于生成一个版本号，其中主版本号(major)左移16位，次版本号(minor)左移8位，修订号(patch)保持不变。  
// 这样，通过位运算得到的整数可以很方便地用于版本号的比较。

#define ${UPPER_PROJECT_NAME}_VERSION_MAJOR  ${PROJECT_VERSION_MAJOR}
#define ${UPPER_PROJECT_NAME}_VERSION_MINOR  ${PROJECT_VERSION_MINOR}
#define ${UPPER_PROJECT_NAME}_VERSION_PATCH  ${PROJECT_VERSION_PATCH}

// 此扩展的版本号。用于#if比较。  
// 这是使用CMake项目宏中设置的版本来生成的。  
#define ${UPPER_PROJECT_NAME}_VERSION  ${UPPER_PROJECT_NAME}_VERSION_CHECK( ${PROJECT_VERSION_MAJOR}, ${PROJECT_VERSION_MINOR}, ${PROJECT_VERSION_PATCH} )  
  
namespace VersionInfo {  
    // 项目名称和版本作为字符串。  
    // 这是使用cmake项目宏中的项目名称和当前的git提交信息生成的。  
    //   
    // 它采用的形式是"<项目名称> <最近的标签>-<#自上次标签以来的提交次数>-<简短的提交哈希>"。  
    // 如果自上次标签以来没有提交，则仅显示标签。  
    constexpr std::string_view VERSION_STR = "${PROJECT_NAME} ${GIT_SHORT}";  
  
    // 版本信息作为字符串。  
    // 这是使用当前的git提交信息生成的。  
    //   
    // 它采用的形式是"<最近的标签>-<#自上次标签以来的提交次数>-<简短的提交哈希>"。  
    // 如果自上次标签以来没有提交，则仅显示标签。  
    constexpr std::string_view VERSION_SHORT_STR = "${GIT_SHORT}";  
  
    // 完整的git SHA1哈希作为字符串。  
    // 这是使用当前的git提交信息生成的。  
    constexpr std::string_view GIT_SHA1_STR = "${GIT_SHA1}";  
  
    // 注意：${UPPER_PROJECT_NAME}, ${PROJECT_NAME}, ${GIT_SHORT}, ${GIT_SHA1} 等是占位符，  
    // 在实际的CMake配置和构建过程中，这些占位符会被替换为相应的值。  
    // 例如，${UPPER_PROJECT_NAME} 可能被替换为项目名的大写形式，${GIT_SHORT} 可能包含git的简短提交信息。  
}
